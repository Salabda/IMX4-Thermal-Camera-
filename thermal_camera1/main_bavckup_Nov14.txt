#include <iostream>
#include "MeasureCoreNet.h"
#include <chrono>
#include <vector>
#include <thread>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <fstream>
using namespace std;

GD_MTC_IRDeviceInfo deviceInfo;
GD_MTC_IRLinkInfo irLinkInfo;
GD_MTC_IRDeviceType deviceType;

int32_t LoginID;
int32_t StreamId;

auto lastLogTime = std::chrono::system_clock::now();
auto lastLogTimeMatrix = std::chrono::system_clock::now();

//Log bin files 
//std::ofstream TemperatureMatrixFile("Output/MarioLogs/TemperatureMatrixFile.bin", std::ios::binary | std::ios::app);


const char* strFilePath = "\Output";

int* user = 0;
string ip = "192.168.1.168";

//int CALLBACK snapPicCallbackFunc(int* iY8Data, int* iY8DataLength, int* iY16Data, int* iY16DataLength, void* pUser){
//	
//	cout << "snapPicCallbackFunc		iY8DataLength = " << iY8DataLength << endl;
//
//	return 1;
//}
//
//int CALLBACK editSnapCallbacFunc(unsigned char* pRgbData, int nRgbDataLen, int nRgbWidth, int nRgbHeight, void* pUser) {
//	cout << "editSnapCallbacFunc		" << nRgbDataLen << endl;
//	bool bFullPath = false; bool bImagData = true; bool bTempData = true;
//	PROCESS_EDIT_SNAP_PIC_CB pSnapPicCb = 0;
//	int32_t snapuni = GD_MTC_SDK_SnapPictureUniform(StreamId, strFilePath, bFullPath, bImagData, bTempData, pSnapPicCb, 0);
//	return 1;
//}

void logFloatsToMatrixFile(float* TempMatrix) {
	auto currentTimeMatrix = std::chrono::system_clock::now();

	auto timeDiffMatrix = std::chrono::duration_cast<std::chrono::milliseconds>(currentTimeMatrix - lastLogTimeMatrix);

	const int minTimeIntervalMsMatrix = 332;

	if (timeDiffMatrix.count() >= minTimeIntervalMsMatrix) {
		std::ofstream TemperatureMatrixFile("Output/MarioLogs/TemperatureMatrixFile.txt", std::ios::app);

		if (!TemperatureMatrixFile.is_open()) {
			std::cerr << "Failed to open the output file." << std::endl;
			return;
		}
		std::time_t timestampMatrix = std::chrono::system_clock::to_time_t(currentTimeMatrix);
		char timestampStrMatrix[26];
		if (ctime_s(timestampStrMatrix, sizeof(timestampStrMatrix), &timestampMatrix) != 0) {
			std::cerr << "Failed to format timestamp." << std::endl;
			TemperatureMatrixFile.close();
			return;
		}

		TemperatureMatrixFile << timestampStrMatrix << "    Temperature Matrix  " << TempMatrix << std::endl;
		TemperatureMatrixFile.close();

		lastLogTimeMatrix = currentTimeMatrix;
	}
}


void logFloatsToMaxTempFile(GD_MTC_TempPointInfo PointMax) {
	auto currentTime = std::chrono::system_clock::now();

	auto timeDiff = std::chrono::duration_cast<std::chrono::milliseconds>(currentTime - lastLogTime);

	const int minTimeIntervalMs = 332;
	if (timeDiff.count() >= minTimeIntervalMs) {
		std::tm timeInfo;
		std::time_t timestamp = std::chrono::system_clock::to_time_t(currentTime);

		if (localtime_s(&timeInfo, &timestamp) != 0) {
			std::cerr << "Failed to get local time." << std::endl;
			return;
		}

		char filename[50];
		// Create a CSV file with the date as the name (e.g., "2023-10-29.csv")
		std::strftime(filename, sizeof(filename), "Output/MarioLogs/%Y-%m-%d.csv", &timeInfo);

		// Open the output CSV file
		std::ofstream MaxTempFile(filename, std::ios::app);

		if (!MaxTempFile.is_open()) {
			std::cerr << "Failed to open the output file." << std::endl;
			return;
		}

		char timestampStr[14]; // Format for time without year, month, and date
		std::strftime(timestampStr, sizeof(timestampStr), "%H:%M:%S", &timeInfo);

		MaxTempFile << timestampStr << ","<< "temp = " << PointMax.PointTemp <<"," << "X = " << PointMax.PointX << "," << "Y = " << PointMax.PointY << std::endl;
		MaxTempFile.close();

		lastLogTime = currentTime;
	}
}


int CALLBACK rgbCallbackFunc(const GD_MTC_CALLBACK_RGBInfo* RGBInfo, void* pUser) {
	
	int w = RGBInfo->ImgWidth;
	int h = RGBInfo->ImgHeight;
	if (h == 0 || w == 0) {
		//cout << " -----------------------rgbCallbackFunc EMPTY IMAGE	w=	" << RGBInfo->ImgWidth << endl;
		return 1; }
	cv::Mat combinedImage(RGBInfo->ImgHeight, RGBInfo->ImgWidth, CV_8UC3, RGBInfo->RGBData);
	if(combinedImage.empty())
	{
		//cout << " -----------------------rgbCallbackFunc EMPTY IMAGE	w=	" << RGBInfo->ImgWidth << endl;
	}
	else {
		//cout << " --------------------------rgbCallbackFunc	w= " << RGBInfo->ImgWidth << endl;
		cv::imshow("Camera Feed", combinedImage);
		cv::waitKey(1);
	}
	combinedImage.release();
	return 1;
}


int RGBvideofeed() {

	GD_MTC_CALLBACK_RGBInfo rgbInfo;
	memset(&rgbInfo, 0x00, sizeof(GD_MTC_CALLBACK_RGBInfo));
	while (true)
	{
		//cout << "WHILE LOOP	" << endl;
		int res = rgbCallbackFunc(&rgbInfo, &user);
		if (res == 0) {
			cout << "No ERROR." << res << endl;
			return 1; 
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(100));
	}
	return 1;
}


int CALLBACK y16CallbackFunc(const GD_MTC_CALLBACK_Y16Info* pY16Info, void* pUser)
{
	GD_MTC_TempPointInfo pTempPointMax;

	int w = pY16Info->ImgWidth;
	int h = pY16Info->ImgHeight;
	float* pTempMatrix = new float[w * h];

	if (h == 0 || w == 0) { 
		cout << " -----------------------y16CallbackFunc EMPTY Matrix	w=	" << pY16Info->ImgWidth << endl;

		delete[] pTempMatrix; // Clean up dynamically allocated memory
		return 1; }


	if (0 == GD_MTC_SDK_GetTempMatrix(pY16Info->pOpque, pTempMatrix)) { 

		if (pTempMatrix) {
			//cout << " -----------------y16CallbackFunc TEMP MATRIX	pTempMatrix=[" << pTempMatrix[0] << "]" << endl;
			
			logFloatsToMatrixFile(pTempMatrix);



		}
		else {
			//cout << " -----------------y16CallbackFunc EMPTY TEMP MATRIX	pTempMatrix=" << pTempMatrix << endl;
		}
	}
	else {
		cout << " -----------------y16CallbackFunc GD_MTC_SDK_GetTempMatrix Error	"  << endl;
	}


	if (0 == GD_MTC_SDK_GetHighTemp(pY16Info->pOpque, &pTempPointMax)){

		if (pTempMatrix) {
			cout << " -----------------y16CallbackFunc TEMP MATRIX	 pTempPointMax->PointTemp " << pTempPointMax.PointTemp << endl;
			//logFloatsToMaxTempFile(pTempPointMax);
		}
		else {
			//cout << " -----------------y16CallbackFunc EMPTY TEMP MATRIX	pTempMatrix=" << pTempMatrix << endl;
		}
	}
	else {
		cout << " -----------------y16CallbackFunc GD_MTC_SDK_GetTempMatrix Error	" << endl;
	}



	delete[] pTempMatrix;
	return 1;
}


int Y16feed() {

	while (true)
	{
		GD_MTC_CALLBACK_Y16Info Y16Info2;
		memset(&Y16Info2, 0x00, sizeof(GD_MTC_CALLBACK_Y16Info));
		y16CallbackFunc(&Y16Info2, 0);
		std::this_thread::sleep_for(std::chrono::milliseconds(800));
	}
	return 1;
}


int main() {

	irLinkInfo.Y16CB = y16CallbackFunc;
	irLinkInfo.RGBCB = rgbCallbackFunc;
	//irLinkInfo.SnapCB = snapPicCallbackFunc;

	//Initialization
	if (GD_MTC_SDK_Init() != NO_ERROR) {
		cout << "SDK initialization failed." << GD_MTC_SDK_Init() << endl;
		return 1;
	}

	deviceInfo.DevType = NET384x288NOCLIPHS;
	strcpy_s(deviceInfo.IpAddress, "192.168.1.168");

	//Logging into device
	LoginID = GD_MTC_SDK_Login(deviceInfo, user);
	if (LoginID == ERROR_LOGIN_FAIL) {
		cout << "Login failed." << endl;
		GD_MTC_SDK_Release();
		return 1;
	}

	//Scannign for device type
	if (GD_MTC_SDK_GetDeviceType("192.168.1.168", deviceType) == false) {
		cout << "Can't find device type." << endl;
		GD_MTC_SDK_Release();
		return 1;
	}
	std::this_thread::sleep_for(std::chrono::milliseconds(3000));
	cout << " --------------------------MAIN = 1" << endl;
	//Opening Stream
	irLinkInfo.nPullDataType = PULL_DATA_TYPE_H264_AND_Y16;
	StreamId = GD_MTC_SDK_OpenStream(LoginID, &irLinkInfo, 2, 25, user);
	if (StreamId == ERROR_OPENSTREAM_FAIL) {
		cout << "Failed to Open Stream." << endl;
		GD_MTC_SDK_CloseStream(StreamId);
		GD_MTC_SDK_Release();
		return 1;
	}


	cout << " --------------------------MAIN = 2" << endl;

	thread Y16ProcessingThread(Y16feed);
	thread videoProcessingThread(RGBvideofeed);

	videoProcessingThread.join();
	Y16ProcessingThread.join();

	cout << "END = " << endl;

	//int32_t autofocus = GD_MTC_SDK_FocusAuto(StreamId, user);

	//int32_t supported = GD_MTC_SDK_SupportFunction(NET384x288NOCLIPHS, PULL_DATA_TYPE_H264_AND_Y16, 72);
	//if (supported == 0) {
	//	cout << "Not Supported." << endl;
	//	return 1;
	//}

	//cout << " --------------------------MAIN = 3" << endl;
	//////Take a Picture
	//int32_t picture = GD_MTC_SDK_SnapPictureUniform(StreamId, strFilePath, false, true, true, 0, user);
	//if (picture != NO_ERROR) {
	//	cout << "Failed to Take a Picture." << endl;
	//	GD_MTC_SDK_CloseStream(StreamId);
	//	GD_MTC_SDK_Release();
	//	return 1;
	//}
	//cout << " --------------------------MAIN = 4" << endl;

	GD_MTC_SDK_CloseStream(StreamId);
	GD_MTC_SDK_Release();
	return 0;

}





